name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # dependabot:
  #   name: Dependabot Updates
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Dependabot Configuration
  #       run: |
  #         echo "version: 2" > .github/dependabot.yml
  #         echo "updates:" >> .github/dependabot.yml
  #         echo "  - package-ecosystem: \"npm\"" >> .github/dependabot.yml
  #         echo "    directory: \"/\"" >> .github/dependabot.yml
  #         echo "    schedule:" >> .github/dependabot.yml
  #         echo "      interval: \"monthly\"" >> .github/dependabot.yml
  #         echo "    open-pull-requests-limit: 10" >> .github/dependabot.yml
  #         echo "Dependabot configuration created"
  #       shell: bash
  #       continue-on-error: true

  # lint:
  #   name: Lint Code Base
  #   runs-on: ubuntu-latest
  #   needs: dependabot
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Run Super-Linter
  #       uses: github/super-linter@v4
  #       env:
  #         VALIDATE_ALL_CODEBASE: false
  #         GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  # build:
  #   name: Build Project
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "16.20.2"

  #     - name: Install dependencies
  #       run: npm install --legacy-peer-deps

  #     - name: Build Project
  #       id: build
  #       run: |
  #         npm run build 2> build_errors.log || true
  #         exit_code=$?
  #         echo "error_files_present=$([[ $exit_code -ne 0 ]])" >> $GITHUB_ENV
  #         exit $exit_code

  #     - name: Upload Error Files
  #       if: ${{ env.error_files_present == 'true' || always() }}
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: error-files
  #         path: build_errors.log

  # push_to_registry:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   # needs: build
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Extract metadata for Docker
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: lefisius/dockerbuild

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Create New Branch with Commit Hash
  #       env:
  #         GH_PAT: ${{ secrets.GH_PAT }}
  #       run: |
  #         git config user.name Lefisius
  #         git config user.email lephiafuri@gmail.com
  #         COMMIT_MESSAGE=$(git log -1 --pretty=%B)
  #         NEW_BRANCH_NAME="log-$(echo "$COMMIT_MESSAGE" | tr '[:upper:]' '[:lower:]' | tr '[:space:]' '-' | tr '[:punct:]' '-')"
  #         git checkout -b $NEW_BRANCH_NAME
  #         git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git $NEW_BRANCH_NAME

  zap_scan:
    runs-on: ubuntu-latest
    # needs: push_to_registry
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Pull Docker image
        run: docker pull lefisius/dockerbuild:main

      - name: Create output directory
        run: |
          mkdir -p output
          chmod 777 output

      - name: Run ZAP scan with timeout
        run: |
          timeout 60s docker run --rm -v ${{ github.workspace }}/output:/output lefisius/dockerbuild:main java -jar /zap/ZAP_D-2024-09-17/zap-D-2024-09-17.jar \
          -daemon -quickurl https://996c-61-7-146-25.ngrok-free.app -quickout /output/zap_report.html

      - name: Check output directory
        run: ls -l output

      - name: Upload ZAP report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: ./output/zap_report.html

  # trigger_jenkins:
  #   name: Trigger Jenkins Job
  #   runs-on: ubuntu-latest
  #   needs: zap_scan
  #   steps:
  #     - name: Trigger Jenkins Job
  #       run: |
  #         curl -X POST "https://0524-61-7-146-25.ngrok-free.app/job/testpipe/build" \
  #         --user "user:11b20d5f21817203f0fb4db12e13b2402e"

  # get_commit_author_email:
  #   name: Get Commit Author Email
  #   runs-on: ubuntu-latest
  #   outputs:
  #     commit_author_email: ${{ steps.get_commit_info.outputs.commit_author_email }}
  #     changed_files: ${{ steps.get_commit_info.outputs.changed_files }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2

  #     - name: Get Commit Info
  #       id: get_commit_info
  #       run: |
  #         AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
  #         CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
  #         echo "commit_author_email=${AUTHOR_EMAIL}" >> $GITHUB_ENV
  #         echo "changed_files=${CHANGED_FILES}" >> $GITHUB_ENV

  # send_failure_notification:
  #   name: Send Failure Notification
  #   runs-on: ubuntu-latest
  #   needs:
  #     [dependabot, lint, build, push_to_registry, zap_scan, trigger_jenkins]
  #   if: ${{ failure() }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2

  #     - name: Download Error Files
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: error-files

  #     - name: Get Error Log and Commit Info
  #       id: error_info
  #       run: |
  #         commit_author_email=$(git log -1 --pretty=format:'%ae')
  #         changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')

  #         error_paths=$(grep -o '/.*error' build_errors.log | sed 's/:.*//' | sort -u | tr '\n' ' ' | sed 's/ $//')
  #         echo "error_paths=$error_paths" >> $GITHUB_ENV

  #         check_file_for_errors() {
  #           local file=$1
  #           grep -q "$file" build_errors.log
  #           return $?
  #         }

  #         non_error_files=""

  #         for file in $changed_files; do
  #           if ! check_file_for_errors "$file"; then
  #             non_error_files+="$file "
  #           fi
  #         done

  #         echo "non_error_files=$non_error_files" >> $GITHUB_ENV
  #         echo "changed_files_text=ไฟล์ที่มีการแก้ไข: $changed_files" >> $GITHUB_ENV
  #         echo "commit_author_email=$commit_author_email" >> $GITHUB_ENV

  #     - name: Send email on failure
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: smtp.gmail.com
  #         server_port: 587
  #         username: ${{ secrets.GMAIL_USERNAME }}
  #         password: ${{ secrets.GMAIL_APP_PASSWORD }}
  #         subject: งาน ${{ github.job }} ของ ${{ github.repository }} ล้มเหลว
  #         body: |
  #           ข้อความ: งาน `build` ของ ${{ github.repository }} ล้มเหลว

  #           รายละเอียดข้อผิดพลาดอยู่ในไฟล์แนบ

  #           ไฟล์ที่มีข้อผิดพลาด :
  #           ${{ env.error_paths }}

  #           ไฟล์ที่แก้แล้ว complete: ${{ env.non_error_files }}

  #           ${{ env.changed_files_text }}
  #         to: ${{ env.commit_author_email }}
  #         from: ${{ secrets.GMAIL_USERNAME }}
  #         attachments: build_errors.log

  # send_success_notification:
  #   name: Send Success Notification
  #   runs-on: ubuntu-latest
  #   needs:
  #     [dependabot, lint, build, push_to_registry, zap_scan, trigger_jenkins]
  #   if: ${{ always() }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2

  #     - name: Get Commit Info
  #       id: commit_info
  #       run: |
  #         commit_author_email=$(git log -1 --pretty=format:'%ae')
  #         changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
  #         echo "commit_author_email=${commit_author_email}" >> $GITHUB_ENV
  #         echo "changed_files=${changed_files}" >> $GITHUB_ENV

  #     - name: Send email on success
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: smtp.gmail.com
  #         server_port: 587
  #         username: ${{ secrets.GMAIL_USERNAME }}
  #         password: ${{ secrets.GMAIL_APP_PASSWORD }}
  #         subject: งาน ${{ github.job }} ของ ${{ github.repository }} สำเร็จ
  #         body: |
  #           ข้อความ: งาน `build` ของ ${{ github.repository }} สำเร็จ

  #           ไฟล์ที่มีการแก้ไข: ${{ env.changed_files }}

  #           ขอบคุณที่รอดำเนินการให้เสร็จสิ้น
  #         to: ${{ env.commit_author_email }}
  #         from: ${{ secrets.GMAIL_USERNAME }}
