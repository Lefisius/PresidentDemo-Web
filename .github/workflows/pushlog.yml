name: CI Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches:
      - main

jobs:
  dependabot:
    name: Dependabot Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Dependabot Configuration
        run: |
          echo "version: 2" > .github/dependabot.yml
          echo "updates:" >> .github/dependabot.yml
          echo "  - package-ecosystem: \"npm\"" >> .github/dependabot.yml
          echo "    directory: \"/\"" >> .github/dependabot.yml
          echo "    schedule:" >> .github/dependabot.yml
          echo "      interval: \"monthly\"" >> .github/dependabot.yml
          echo "    open-pull-requests-limit: 10" >> .github/dependabot.yml
          echo "Dependabot configuration created"
        shell: bash
        continue-on-error: true

  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    needs: dependabot
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.20.2"

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build Project
        id: build
        run: |
          npm run build 2> build_errors.log || true
          exit_code=$?
          echo "error_files_present=$([[ $exit_code -ne 0 ]])" >> $GITHUB_ENV
          exit $exit_code

      - name: Upload Error Files
        if: ${{ env.error_files_present == 'true' || always() }}
        uses: actions/upload-artifact@v3
        with:
          name: error-files
          path: build_errors.log

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    concurrency:
      group: push-to-registry-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: krisneonploy/dockerbuild

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create_log_branch:
    name: Create Log Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, build, push_to_registry]
    concurrency:
      group: create-log-branch-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Create New Branch with Commit Message
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
            # Get the author information from the latest commit
            COMMIT_AUTHOR_NAME=$(git log -1 --pretty=%an)
            COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=%ae)

            # Set the git config to use the author's info
            git config user.name "$COMMIT_AUTHOR_NAME"
            git config user.email "$COMMIT_AUTHOR_EMAIL"

            FULL_COMMIT_MESSAGE=$(git log -1 --pretty=%B)

            if [[ $FULL_COMMIT_MESSAGE == Merge\ pull\ request* ]]; then
              PR_NUM=$(echo "$FULL_COMMIT_MESSAGE" | grep -oP '#\K\d+')
              PR_TITLE=$(git log -1 --pretty=%B | sed -n '5p' | cut -c1-50)
              COMMIT_MESSAGE="pr-${PR_NUM}-${PR_TITLE}"
            else
              COMMIT_MESSAGE=$(echo "$FULL_COMMIT_MESSAGE" | head -n 1)
            fi

            SANITIZED_MESSAGE=$(echo "$COMMIT_MESSAGE" | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]' '-' | sed 's/^-//;s/-$//' | cut -c1-50)

            NEW_BRANCH_NAME="log-${SANITIZED_MESSAGE}"

            git checkout -b $NEW_BRANCH_NAME
            git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git $NEW_BRANCH_NAME

  ZAP_Full_Scan:
    runs-on: ubuntu-latest
    needs: push_to_registry
    name: ZAP Full Scan Webapplication
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "https://2146-61-7-146-25.ngrok-free.app/"
          cmd_options: "-a"

  ZAP_API_Scan:
    runs-on: ubuntu-latest
    needs: push_to_registry
    name: ZAP_API_Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master

      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.8.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          format: openapi
          target: "https://2146-61-7-146-25.ngrok-free.app/"
          cmd_options: "-a"

      - name: Upload ZAP Scan Report
        uses: actions/upload-artifact@v3
        with:
          name: ZAP_API_Scan
          path: |
            report_json.json
            report_md.md
            report_html.html

  trigger_jenkins:
    name: Trigger Jenkins Job
    runs-on: ubuntu-latest
    needs: [ZAP_Full_Scan, ZAP_API_Scan]
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: trigger-jenkins-job-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Trigger Jenkins Job
        id: trigger_jenkins
        run: |
          response=$(curl -X POST "https://1412-61-7-146-25.ngrok-free.app/job/dornny/build" \
          --user "dornrock:1147d17fc8ec8e23ed131270370d186bf6")
          echo "Triggered Jenkins Job"

      - name: Wait for Jenkins Job to Complete
        run: |
            job_status="null"
            max_attempts=20
            attempt=0
            while [ "$job_status" != "SUCCESS" ] && [ $attempt -lt $max_attempts ]; do
              sleep 15
              attempt=$((attempt+1))
              response=$(curl -s -w "%{http_code}" "https://1412-61-7-146-25.ngrok-free.app/job/dornny/lastBuild/api/json" \
                --user "dornrock:1147d17fc8ec8e23ed131270370d186bf6")
              http_code=${response: -3}
              body=${response:0:${#response}-3}

              echo "HTTP Response Code: $http_code"

              if [ "$http_code" -ne 200 ]; then
                echo "Error fetching Jenkins job status. HTTP Response Code: $http_code"
                echo "Response body: $body"
                if [ $attempt -eq $max_attempts ]; then
                  echo "Max attempts reached. Exiting."
                  exit 1
                fi
                continue
              fi

              if ! job_status=$(echo "$body" | jq -r '.result'); then
                echo "Error parsing JSON response. Raw response:"
                echo "$body"
                if [ $attempt -eq $max_attempts ]; then
                  echo "Max attempts reached. Exiting."
                  exit 1
                fi
                continue
              fi

              echo "Current Job Status: $job_status"

              if [ "$job_status" = "FAILURE" ]; then
                echo "Jenkins job failed. Exiting."
                exit 1
              fi
            done

            if [ $attempt -eq $max_attempts ]; then
              echo "Max attempts reached. Job did not complete successfully."
              exit 1
            fi

  get_commit_author_email:
    name: Get Commit Author Email
    runs-on: ubuntu-latest
    outputs:
      commit_author_email: ${{ steps.get_commit_info.outputs.commit_author_email }}
      changed_files: ${{ steps.get_commit_info.outputs.changed_files }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get Commit Info
        id: get_commit_info
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
          echo "commit_author_email=${AUTHOR_EMAIL}" >> $GITHUB_ENV
          echo "changed_files=${CHANGED_FILES}" >> $GITHUB_ENV

  send_failure_notification:
    name: Send Failure Notification
    runs-on: ubuntu-latest
    needs:
      [
        dependabot,
        lint,
        build,
        push_to_registry,
        ZAP_Full_Scan,
        ZAP_API_Scan,
        trigger_jenkins,
      ]
    if: ${{ failure() }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Download Error Files
        uses: actions/download-artifact@v3
        with:
          name: error-files

      - name: Get Error Log and Commit Info
        id: error_info
        run: |
          commit_author_email=$(git log -1 --pretty=format:'%ae')
          changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')

          error_paths=$(grep -o '/.*error' build_errors.log | sed 's/:.*//' | sort -u | tr '\n' ' ' | sed 's/ $//')
          echo "error_paths=$error_paths" >> $GITHUB_ENV

          check_file_for_errors() {
            local file=$1
            grep -q "$file" build_errors.log
            return $?
          }

          non_error_files=""

          for file in $changed_files; do
            if ! check_file_for_errors "$file"; then
              non_error_files+="$file "
            fi
          done

          echo "non_error_files=$non_error_files" >> $GITHUB_ENV
          echo "changed_files_text=ไฟล์ที่มีการแก้ไข: $changed_files" >> $GITHUB_ENV
          echo "commit_author_email=$commit_author_email" >> $GITHUB_ENV

      - name: Send email on failure
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: งาน ${{ github.job }} ของ ${{ github.repository }} ล้มเหลว
          body: |
            ข้อความ: งาน `build` ของ ${{ github.repository }} ล้มเหลว

            รายละเอียดข้อผิดพลาดอยู่ในไฟล์แนบ

            ไฟล์ที่มีข้อผิดพลาด :
            ${{ env.error_paths }}

            ไฟล์ที่แก้แล้ว complete: ${{ env.non_error_files }}

            ${{ env.changed_files_text }}
          to: ${{ env.commit_author_email }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: build_errors.log

  send_success_notification:
    name: Send Success Notification
    runs-on: ubuntu-latest
    needs:
      [
        dependabot,
        lint,
        build,
        push_to_registry,
        ZAP_Full_Scan,
        ZAP_API_Scan,
        trigger_jenkins,
      ]
    if: ${{ always() }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get Commit Info
        id: commit_info
        run: |
          commit_author_email=$(git log -1 --pretty=format:'%ae')
          changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
          echo "commit_author_email=${commit_author_email}" >> $GITHUB_ENV
          echo "changed_files=${changed_files}" >> $GITHUB_ENV

      - name: Send email on success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: งาน ${{ github.job }} ของ ${{ github.repository }} สำเร็จ
          body: |
            ข้อความ: งาน `build` ของ ${{ github.repository }} สำเร็จ

            ไฟล์ที่มีการแก้ไข: ${{ env.changed_files }}

            ขอบคุณที่รอดำเนินการให้เสร็จสิ้น
          to: ${{ env.commit_author_email }}
          from: ${{ secrets.GMAIL_USERNAME }}