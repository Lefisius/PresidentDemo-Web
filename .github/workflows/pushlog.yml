name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ขั้นตอน Dependabot Updates
  dependabot:
    name: Dependabot Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Dependabot Configuration
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = '.github/dependabot.yml';
            const config = `
            version: 2
            updates:
              - package-ecosystem: "npm"
                directory: "/" 
                schedule:
                  interval: "monthly"
                open-pull-requests-limit: 10
            `;
            if (!fs.existsSync(path)) {
              fs.writeFileSync(path, config);
              console.log('Dependabot configuration created');
            } else {
              console.log('Dependabot configuration already exists');

  # ขั้นตอน Lint Code
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    needs: dependabot
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  # ขั้นตอน Build Angular App
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.20.2'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Build Project
        id: build
        run: |
          npm run build 2> build_errors.log || true
          exit_code=$?
          echo "error_files_present=$([[ $exit_code -ne 0 ]])" >> $GITHUB_ENV
          exit $exit_code
      - name: Upload Error Files
        if: ${{ env.error_files_present == 'true' || always() }}
        uses: actions/upload-artifact@v3
        with:
          name: error-files
          path: build_errors.log

  # ขั้นตอน Push Docker image ไปที่ Docker Hub
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: lefisius/dockerbuild
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ขั้นตอน Run ZAP Scan
  zap_scan:
    name: Run ZAP Scan
    runs-on: ubuntu-latest
    needs: push_to_registry
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: List files to verify dockerfile location
        run: |
          ls -la
          ls -la dockerfile
      - name: Build ZAP Docker Image
        run: |
          docker build -t zap-scan-image -f dockerfile .
      - name: Run ZAP Container
        run: |
          docker run -d --name zap -p 8080:8080 zap-scan-image
          sleep 60
      - name: Start ZAP Scan
        run: |
          docker exec zap zap-baseline.py -t https://your-ngrok-url.ngrok-free.app -r zap_report.html
        env:
          ZAP_API_KEY: ${{ secrets.ZAP_API_KEY }}
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap_report.html

  # ขั้นตอน Trigger Jenkins Job
  trigger_jenkins:
    name: Trigger Jenkins Job
    runs-on: ubuntu-latest
    needs: zap_scan
    steps:
      - name: Trigger Jenkins Job
        run: |
          curl -X POST "https://your-ngrok-url.ngrok-free.app/job/testpipe/build" \
          --user "user:jenkins-token"

  # ขั้นตอนส่งการแจ้งเตือนเมื่อเกิดความล้มเหลว
  send_failure_notification:
    name: Send Failure Notification
    runs-on: ubuntu-latest
    needs: [dependabot, lint, build, push_to_registry, zap_scan, trigger_jenkins]
    if: ${{ failure() }}
    steps:
      - name: Send email on failure
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: งานล้มเหลว
          body: มีข้อผิดพลาดในขั้นตอนการ build
          to: ${{ secrets.EMAIL }}

  # ขั้นตอนส่งการแจ้งเตือนเมื่อสำเร็จ
  send_success_notification:
    name: Send Success Notification
    runs-on: ubuntu-latest
    needs: [dependabot, lint, build, push_to_registry, zap_scan, trigger_jenkins]
    if: ${{ always() }}
    steps:
      - name: Send email on success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: งานสำเร็จ
          body: งานสำเร็จแล้ว
          to: ${{ secrets.EMAIL }}
